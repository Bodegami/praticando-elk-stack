INSTALAÇÃO

1 - Extrair o zip para uma pasta com permissão de escrita
2 - Certificar-se de que está utilizando o Java 11 ou inferior



EXECUÇÃO
1 - Acessar a pasta do Elasticsearch
2 - Dentro da pasta bin, exectar o arquivo elasticsearch.bat
3 - Pronto! Basta acessar o http://localhost:9200


OPCIONAL (KOPF)

1 - Copiar a pasta kopf para dentro da pasta do elastic.
2 - Mover a pasta kopf para dentro de plugins.
3 - Pronto! Basta acessar o http://localhost:9200/_plugin/kopf/





BASH

curl -XHEAD -v http://localhost:9200/catalogo/pessoas/1


BROWSER

acessar o endpoint: http://localhost:9200/_plugin/kopf/#!/rest


QUERYS 

- Retorna 1 se o documento existe ou 0 caso não exista
curl -XHEAD -v http://localhost:9200/catalogo/pessoas/1

- Busca um documento pelo id
GET catalogo/pessoas/1

- Busca todos os documentos da tabela
GET catalogo/pessoas/_search

- Busca no type por chave e valor (estado:sp)
GET catalogo/pessoas/_search?q=estado:SP

- Busca em todos os documentos pelo valor (futebol)
GET catalogo/pessoas/_search?q=futebol
GET catalogo/pessoas/_search?q=_all:futebol

- Busca em todos os documentos pelo valor (futebol) no atributo estado	
GET catalogo/pessoas/_search?q=estado:SP


GET catalogo/pessoas/_search?q=futebol&size=10
GET catalogo/pessoas/_search?q=futebol&size=1&from=2





* Sobre o PUT, ele pode ser o update de um documento
completo ou a criação de um documento com um id especifico.
Ex: Podemos criar um documento com o metodo Post sem especificar
um id, porém utilizando o PUT somos obrigados a especificar o id.

- Insere ou atualiza um documento na tabela indicando o id
PUT catalogo/pessoas/1

- Insere ou atualiza um documento na tabela com id aleatorio
PUT catalogo/pessoas


* Sobre o Post, ele pode criar um novo documento com id 
auto-incremental ou podemos atualizar parcialmente um documento passando o id.
Ex: Podemos atualizar apenas um atributo de um documento passando o id
do documento.

- Insere ou atualiza um documento na tabela indicando o id
POST catalogo/pessoas/1

- Insere ou atualiza um documento na tabela com id aleatorio
POST catalogo/pessoas

- Atualiza apenas um atributo do documento
POST /catalogo/pessoas/1/_update



DELETE catalogo/pessoas/1

GET catalogo/pessoas/1

- Apresenta o "schema" de determinada "tabela"  
GET /catalogo/_mapping/pessoas

- Utiliza o analyzer padrão para fazer uma busca onde quebra a string em tokens, caixa baixa, removendo virgulas e parenteses
GET /_analyze?analyzer=standard&text=Eu+nasci+a+10+mil+(sim,+1-+mil)+anos+atrás

- Utiliza o analyzer simples para fazer uma busca onde quebra a string em tokens, transformando tudo em type "word", removendo virgulas, parenteses e numeros.
GET /_analyze?analyzer=simple&text=Eu+nasci+a+10+mil+(sim,+1-+mil)+anos+atrás

- Utiliza o analyzer whitespace para fazer uma busca onde quebra a string em tokens nos espaços e mantém os dados do texto original.
GET /_analyze?analyzer=whitespace&text=Eu+nasci+a+10+mil+(sim,+1-+mil)+anos+atrás

- Utiliza o analyzer portuguese para fazer uma busca onde quebra a string em tokens, tira os acentos, tira o s do plural,
GET /_analyze?analyzer=portuguese&text=Eu+nasci+a+10+mil+(sim,+1-+mil)+anos+atrás








ENTENDENDO SOBRE A ESTRUTURA DA RESPOSTA

- took
É o tempo em milisegundos para retornar a resposta

- timed_out
Retorna verdade caso tenha tomado timeout ou false caso contrário

- shards
Numero de "partições" do meu index (instância)
	total:
	numero total de shards

	successful:
	numero total de shards que retornaram o documento com sucesso

	failed:
	numero total de falhas ao buscar um documento

- hits
Resultado do objeto retornado

	total:
	numero total de documentos encontrado

	max_score:
	relevancia ou valor da semelhança

	hits:
	body dos documentos encontrados


